package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*; 
import java.io.*;
import rs.etf.pp1.symboltable.Tab;
import rs.etf.pp1.symboltable.concepts.*;
import rs.etf.pp1.mj.runtime.Code;
import rs.etf.pp1.mj.runtime.Run;

//-------------------------------------------------------------------------------------------------------

parser code {:

	Logger log = Logger.getLogger(getClass());
	
	int printCallCount = 0;
	boolean errorDetected = false;
	static final Struct boolType = new Struct(Struct.Bool);
	
	// -- 
	// -- MJ Parser (Main)
	// --

	public static void main(String[] args) throws Exception {
		
		Logger log = Logger.getLogger(MJParser.class);
			
		Reader br = null;

		try {
			if (args.length < 2) {
				log.error("Niste prosledili ispravan broj argumenata! Upotreba: MJParser <source-file> <obj-file>");
				return;
			}

			File sourceCode = new File(args[0]);

			if (!sourceCode.exists()) {
				log.error("<source-file> [" + sourceCode.getAbsolutePath() + "] nije pronadjen!");
				return;
			}

			log.info("Compiling source file: " + sourceCode.getAbsolutePath());

			br = new BufferedReader(new FileReader(sourceCode));

			Yylex lexer = new Yylex(br);

			MJParser p = new MJParser(lexer);
			
			Symbol s = p.parse(); 		
									
			Tab.dump(null);			
			
			Counting.print();
			
			if (!p.errorDetected) {
				File objFile = new File(args[1]);
				log.info("Generisanje bajtkoda: " + objFile.getAbsolutePath());
				if (objFile.exists()) objFile.delete();
				Code.write(new FileOutputStream(objFile));
				log.info("----------------------------");	
				log.info("Parsiranje uspesno zavrseno!");
				log.info("----------------------------");	
				log.info("> Pokretanje .obj");
				log.info("----------------------------");
				String[] runArgs = {args[1]};
				Run.main(runArgs);
			}

			else {
				log.error("Parsiranje NIJE uspesno zavrseno!");
			}
		} 
		
		finally {
			if (br != null) try { br.close(); } catch (IOException e1) { log.error(e1.getMessage(), e1); }
		}

	}
	
	public void report_fatal_error(String message, Object info) throws java.lang.Exception {
		done_parsing();
		report_error(message, info);
	} 
	
	public void syntax_error(Symbol cur_token) {
		report_error("Sintaksna greska", cur_token);
	}
	
	public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
		report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
	} 
	
	public void report_error(String message, Object info) {
		errorDetected = true;
		StringBuilder msg = new StringBuilder(message);
		if (info instanceof Symbol) {
			msg.append(" na liniji ").append(((Symbol)info).left);
		}
		log.error(msg.toString());
	}
	
	public void report_info(String message, Object info) {
		StringBuilder msg = new StringBuilder(message);
		if (info instanceof Symbol) {
			msg.append(" na liniji ").append(((Symbol)info).left);
		}
		log.info(msg.toString());
	}
	
:}

//-------------------------------------------------------------------------------------------------------

scan with {: 
	Symbol s = this.getScanner().next_token();
	//if (s != null && s.value != null)	log.info(s.toString() + " " + s.value.toString());
	return s;
:}

//-------------------------------------------------------------------------------------------------------

init with {:
	Tab.init();
	Tab.currentScope().addToLocals(new Obj(Obj.Type, "bool", new Struct(Struct.Bool))); 	
	Helper.Parser = this;	
	Validator.Parser = this;
	CodeHelper.Parser = this;
	Counting.Parser = this;
:}

//-------------------------------------------------------------------------------------------------------

action code {:
	Helper helper = new Helper();
	Validator validator = new Validator();
	CodeHelper codeHelper = new CodeHelper();
:}

//-------------------------------------------------------------------------------------------------------

non terminal Struct Type, ConstValueType;
non terminal Obj ProgName, Designator, Factor, Term, Expr, CondTerm, Condition, CondFact, TermList, TermListComb;
non terminal Integer MulopLeft, MulopRight, AddopLeft, AddopRight, Relop, Assignop;
non terminal Program, DeclList, Decl, ConstDecl, ConstDeclList, Const, VarDecl, VarList, Var, Return, Read, Print, BlockStatement, ForStarted, ForOver, MethodDeclList, MethodDecl, Static, MethodType, MethodName, FormalPars, FormParam, ClassDecl, ClassName, ClassBase, StatementList, Statement, Matched, Unmatched, DesignatorStatement, CommaNumber, ActPars, OptionalActPars, ClassMethodDecl, DesignatorStatementSemiComma, ClassVarDecl, OptionalFormalPars, FormalParsEnd, LocalPars, MatchedIfStatement, IfMatched, ConditionTerm, UnmatchedIfStatement, OptForInit, OptForCondition, OptForIncr, LocalVarList, LocalVarDecl, LocalVar;
terminal PROGRAM, BREAK, CLASS, IF, ELSE, CONTINUE, CONST, NEW, PRINT, READ, RETURN, VOID, FOR, EXTENDS, STATIC, SEMI_COMMA, COMMA, DOT, PLUS, MINUS, MULTIPLE, DIVIDE, MOD, ASSIGNPLUS, ASSIGNMINUS, ASSIGNMULTIPLE, ASSIGNDIVIDE, ASSIGNMOD, ASSIGN, INCREMENT, DECREMENT, EQUAL, NOTEQUAL, GREATER, GREATEREQUAL, LESS, LESSEQUAL, LOGICALAND, LOGICALOR, LEFTPAREN, RIGHTPAREN, LEFTSQBRACKET, RIGHTSQBRACKET, LEFTBRACE, RIGHTBRACE;
terminal String IDENT;
terminal Boolean BOOLCONST;
terminal Integer NUMBER;
terminal Character CHARCONST;
terminal KAPICA;

//-------------------------------------------------------------------------------------------------------

Program ::= 		PROGRAM ProgName:p DeclList  LEFTBRACE MethodDeclList RIGHTBRACE {: helper.closeProgram(p); :};

ProgName ::= 		IDENT:progName {: RESULT = helper.insertProgram(progName); :};

DeclList ::= 		DeclList Decl | /* epsilon */;
								
Decl ::=			ConstDecl | VarDecl | ClassDecl;
					
//-------------------------------------------------------------------------------------------------------

Type ::= 			IDENT:name {: RESULT = helper.resolveType(name, nameleft); :};
																									
//-------------------------------------------------------------------------------------------------------

ConstDecl ::= 		CONST Type ConstDeclList SEMI_COMMA;

ConstDeclList ::= 	ConstDeclList COMMA Const | Const | error:e {: helper.oporavak(eleft); :} ;

Const ::= 			IDENT:constName ASSIGN ConstValueType:type {: RESULT = helper.insertConstant(constName, type, typeleft); :};

ConstValueType ::= 	NUMBER:val {: RESULT = Tab.intType; helper.constValue = val; :} 
					|
					CHARCONST:val {: RESULT = Tab.charType; helper.constValue = val; :} 
					|
					BOOLCONST:val {: RESULT = parser.boolType; helper.constValue = (val.booleanValue() == true) ? 1 : 0; :};								

//-------------------------------------------------------------------------------------------------------

VarDecl ::= 		Type VarList SEMI_COMMA | Type error:e SEMI_COMMA {: helper.oporavak(eleft); :};					

VarList ::= 		Var | VarList COMMA Var | error:e COMMA Var {: helper.oporavak(eleft); :};					 										
							
Var ::= 			IDENT:varName {: RESULT = helper.insertVariable(varName, varNameleft, 0); :} 
					| 
					IDENT:varName LEFTSQBRACKET RIGHTSQBRACKET {: RESULT = helper.insertVariable(varName, varNameleft, 1); :};
										
//-------------------------------------------------------------------------------------------------------
	
MethodDeclList ::= 		MethodDeclList MethodDecl | /* epsilon */; 		
																								
MethodDecl ::= 			Static MethodType MethodName LEFTPAREN OptionalFormalPars FormalParsEnd RIGHTPAREN
						LocalPars {: helper.initializeCodeMethod(); :} 
						LEFTBRACE StatementList RIGHTBRACE:l {: helper.closeMethod(lleft); :};							
// error							
MethodDecl ::= 			Static MethodType MethodName LEFTPAREN OptionalFormalPars FormalParsEnd RIGHTPAREN error:e {: helper.oporavak(eleft); helper.initializeCodeMethod(); :} LEFTBRACE StatementList RIGHTBRACE:l {: helper.closeMethod(lleft); :};

Static ::= 				STATIC {: helper.isStatic = true; :} | /* epsilon */ {: helper.isStatic = false; :}; 
					
MethodType ::= 			VOID {: RESULT = helper.currentType = Tab.noType; :} | Type;					
					
MethodName ::= 			IDENT:name {: helper.insertMethod(name, nameleft); :};

LocalPars ::=			LocalVarDecl LocalPars | /* epsilon */;

LocalVarDecl ::=		Type LocalVarList SEMI_COMMA | Type error:e {: helper.oporavak(eleft); :} ;
						
LocalVarList ::= 		LocalVar | LocalVarList COMMA LocalVar;

LocalVar ::= 			IDENT:varName {: RESULT = helper.insertVariable(varName, varNameleft, 0); :} 
						| 
						IDENT:varName LEFTSQBRACKET RIGHTSQBRACKET {: RESULT = helper.insertVariable(varName, varNameleft, 1); :};
						
//-------------------------------------------------------------------------------------------------------

FormalParsEnd ::= 		{: helper.insideFormalArguments = false; :};	

OptionalFormalPars ::= 	FormalPars | /* epsilon */;

FormalPars ::= 			FormParam | FormalPars COMMA FormParam | error:e {: helper.oporavak(eleft); :};

FormParam ::= 			Type IDENT:name {:RESULT = helper.insertVariable(name, nameleft, 0); :}
						|
						Type IDENT:name LEFTSQBRACKET RIGHTSQBRACKET {: RESULT = helper.insertVariable(name, nameleft, 1); :};
			
//-------------------------------------------------------------------------------------------------------

ClassDecl ::= 			CLASS ClassName LEFTBRACE ClassVarDecl ClassMethodDecl RIGHTBRACE:r {: helper.closeClass(rleft);  :}
						|
						CLASS ClassName EXTENDS ClassBase LEFTBRACE ClassVarDecl ClassMethodDecl RIGHTBRACE:r {: helper.closeClass(rleft);  :};
								
ClassName ::= 			IDENT:name {: helper.insertClass(name, nameleft);  :};
		
ClassBase ::= 			IDENT:name {: helper.superClass(name, nameleft);  :} | error:e {: helper.oporavak(eleft);  :};		
				
ClassVarDecl ::= 		LocalPars;	

ClassMethodDecl ::= 	LEFTBRACE MethodDeclList RIGHTBRACE	| /* epsilon */;	
							
//-------------------------------------------------------------------------------------------------------

StatementList ::= 		StatementList Statement | /* epsilon */;

Statement ::= 			Matched | Unmatched;

Matched ::= 			DesignatorStatementSemiComma | Return | Read | Print | BlockStatement;

DesignatorStatementSemiComma ::= DesignatorStatement SEMI_COMMA | error:e {: helper.oporavak(eleft); :};

BlockStatement ::= 		LEFTBRACE StatementList RIGHTBRACE {: Counting.found("statementBlocks"); :}; 

Read ::= 				READ LEFTPAREN Designator:d RIGHTPAREN SEMI_COMMA
							{: 	
								if (!validator.lvalue(d)) parser.report_error("Read naredba mora citati u lvalue [" + dleft + "]", null);
								else if (!validator.isPrimitive(d)) parser.report_error("Mora biti prostog tipa [" + dleft + "]", null);
								else { Code.put(d.getType() == Tab.charType ? Code.bread : Code.read); Code.store(d); }		
							:};

Print ::= 				PRINT LEFTPAREN Expr:e CommaNumber RIGHTPAREN SEMI_COMMA
							{:	
								if (!validator.isPrimitive(e)) parser.report_error("Mora biti prostog tipa [" + eleft + "]", null);
								else { Code.loadConst(e.getType() == Tab.charType ? 1 : 5); Code.put(e.getType() == Tab.charType ? Code.bprint : Code.print); }						
							:};

CommaNumber ::= 		COMMA NUMBER | /* epsilon */;					

//-------------------------------------------------------------------------------------------------------
																	
Factor ::= 				NEW Type:type 
							{: 
								if (!validator.userDefinedClass(type)) parser.report_error("Pri koriscenju new morate instancirati klasu [" + typeleft + "]", null);								
								RESULT = new Obj(Obj.Var, "", new Struct(Struct.Class));
						 	:};
						 	 																							
Designator ::= 			Designator:object 
							{:
								if (!validator.lvalueClass(object)) parser.report_error("Morate pristupati klasnim poljima [" + objectleft + "]", null);								
								else Code.load(object);								
							:}
						DOT IDENT:name 
							{: 
								RESULT = helper.designatorField(object, name, nameleft);
							:};

//-------------------------------------------------------------------------------------------------------	
	
// ---	
// --- Arithmetics
// ---
	
//-------------------------------------------------------------------------------------------------------	
	
Designator ::= 			IDENT:name {: RESULT = helper.resolveIdent(name, nameleft); :};
								
DesignatorStatement ::= Designator:d INCREMENT 
							{:
								if (!validator.intType(d) || !validator.lvalue(d))
									parser.report_error("Morate inkrementirati int tip, lvalue vrednost [" + dleft + "]", null);															
								else codeHelper.increment(d);																											
							:};
													
DesignatorStatement ::= Designator:d DECREMENT 
							{:
								if (!validator.intType(d) || !validator.lvalue(d)) parser.report_error("Morate inkrementirati int tip, lvalue vrednost [" + dleft + "]", null);															
								else codeHelper.decrement(d);
							:};											
	
Designator ::= 			Designator:array
							{:
								if (!validator.isArray(array)) parser.report_error("Morate pristupiti nizu [" + arrayleft + "]", null);
								else Code.load(array);					
							:}
						LEFTSQBRACKET Expr:index RIGHTSQBRACKET 
							{:		
								RESULT = Tab.noObj;											
								if (!validator.intType(index)) parser.report_error("Morate indeksirati sa int tipom [" + indexleft + "]", null);								
								else RESULT = helper.resolveArrayElem(array, arrayleft, index);																																																																												 														
							:};			
	
DesignatorStatement ::= Designator:left Assignop:op Expr:right 
							{:   								
								if (!validator.checkAssignment(left, right))
									parser.report_error("Dodela vrednosti nije moguca [" + leftleft + "]", null);
								else
									codeHelper.assignOp(left, op, right);				 	
							:};							
							
Assignop ::= 			ASSIGN {: RESULT = Code.eq; :} | AddopRight:res {: RESULT = res; :} | MulopRight:res {: RESULT = res; :};							
DesignatorStatement ::= Designator Assignop error:e {:  helper.oporavak(eleft);  :};
//-------------------------------------------------------------------------------------------------------			

Expr ::= 			TermListComb:t {: RESULT = t; :} 
					|
					MINUS TermListComb:t {: Code.put(Code.neg); RESULT = t; :};
						 								
TermListComb ::= 	TermList:l AddopRight:op TermListComb:r {: RESULT = codeHelper.addopRight(l, op, r); :}					
			     	|
			     	TermList:l MulopRight:op TermListComb:r {: RESULT = codeHelper.mulopRight(l, op, r); :}
					|
					TermList:t {: RESULT = t; :};

TermList ::= 		TermList:l AddopLeft:op Term:r {: RESULT = codeHelper.addopLeft(l, op, r); :}					
			 		|			  
			 		Term:t {: RESULT = t; :};			 				 
			 			 
Term ::=	 		Term:l MulopLeft:op Factor:r {: RESULT = codeHelper.mulopLeft(l, op, r); :} 		 
		 			|
		 			Term:l KAPICA Factor:r {: RESULT = codeHelper.kapica(l, r); :}
		 			|
		 			Factor:f {: RESULT = f; :};
					
AddopLeft ::= 		PLUS {: RESULT = Code.add; :} | MINUS {: RESULT = Code.sub; :};

AddopRight ::= 		ASSIGNPLUS {: RESULT = Code.add; :} | ASSIGNMINUS {: RESULT = Code.sub; :};

MulopLeft ::= 		MULTIPLE  {: RESULT = Code.mul; :} | DIVIDE {: RESULT = Code.div; :} | MOD {: RESULT = Code.rem; :};			

MulopRight ::= 		ASSIGNMULTIPLE {: RESULT = Code.mul; :} | ASSIGNDIVIDE {: RESULT = Code.div; :} | ASSIGNMOD {: RESULT = Code.rem; :};				
							
//-------------------------------------------------------------------------------------------------------																

Factor ::= 			Designator:d 
						{:
							RESULT = d;
							Code.load(d);
						:};		
							
Factor ::=			NUMBER:n 
						{: 
							Obj o = new Obj(Obj.Con, "", Tab.intType);
							o.setAdr(n.intValue());									
							RESULT = o;
							Code.load(o);				
						:}; 											
			 
Factor ::=			CHARCONST:c
						{:
							Obj o = new Obj(Obj.Con, "", Tab.charType);
							o.setAdr(c.charValue());
							RESULT = o;
							Code.load(o);
						:};											
			
Factor ::=			BOOLCONST:b
						{:
							Obj o = new Obj(Obj.Con, "", parser.boolType);
							o.setAdr((b.booleanValue() == true) ? 1 : 0);
							RESULT = o;
							Code.load(o);
						:}; 
					
Factor ::=			NEW Type:type LEFTSQBRACKET Expr:expr RIGHTSQBRACKET
						{: 		
							RESULT = Tab.noObj;	
							if (!validator.intType(expr)) parser.report_error("Pri instanciranju niza morate navesti int tip [" + exprleft + "]", null);						
							else RESULT = codeHelper.newArray(type);
							Helper.NewArraySize = expr.getAdr();								
						:};						
			
Factor ::=			LEFTPAREN Expr:expr RIGHTPAREN 
						{:
							RESULT = expr;
						:};					
							
//-------------------------------------------------------------------------------------------------------	
	
// ---	
// --- Function Call
// ---
	
//-------------------------------------------------------------------------------------------------------	
																
DesignatorStatement ::=	Designator:func 
							{:
								helper.checkMainInvokeCall();
								if (!validator.isMeth(func)) parser.report_error("Morate pozivati funkciju [" + funcleft + "]", null);
								else if (func.getType() != Tab.noType) parser.report_error("Samo void funkcija moze biti pozvana kao iskaz [" + funcleft + "]", null);																
							:}
						LEFTPAREN OptionalActPars RIGHTPAREN 
							{:																				
								if (!validator.methodParametersMatch(helper.insideClass, func)) parser.report_error("Navedeni argumenti nisu ispravni pri pozivu [" + funcleft + "]", null);
								else codeHelper.designatorFunctionCall(func);																					 				
								RESULT = func;
							:};

Factor ::= 				Designator:func LEFTPAREN OptionalActPars RIGHTPAREN
							{: 	
								helper.checkMainInvokeCall();
								codeHelper.factorFunctionCall(func, funcleft);
								RESULT = func;
							:};
 					
Factor ::=				Designator:func LEFTPAREN error:e {: helper.oporavak(eleft);  :} RIGHTPAREN;		
												
OptionalActPars ::= 	ActPars | /* epsilon */;
		
ActPars ::= 			Expr:e {: validator.addActParam(e); RESULT = e; :} | ActPars:ap COMMA Expr:e {: validator.addActParam(e); :};																												
														
Return ::= 				RETURN SEMI_COMMA:s {: codeHelper.return_(false, sleft, helper.insideMethod, helper.isVoid, helper.currentMethod, null); :};
				
Return ::=	 			RETURN Expr:e SEMI_COMMA:s {: codeHelper.return_(true, sleft, helper.insideMethod, helper.isVoid, helper.currentMethod, e); :}; 	 											
														
//-------------------------------------------------------------------------------------------------------	
	
// ---	
// --- IF, ELSE Conditions
// ---

//-------------------------------------------------------------------------------------------------------							

Matched ::= 				MatchedIfStatement;					
					
MatchedIfStatement ::= 		IfMatched Matched 
								{: 
									if (CodeHelper.cond.pop().booleanValue()) {
										Code.fixup(CodeHelper.patch2.pop());
									}
								:}; 

IfMatched ::= 				IF LEFTPAREN ConditionTerm RIGHTPAREN Matched ELSE 
		  						{:
		  							if (CodeHelper.cond.peek().booleanValue()) {
			  							Code.putJump(0);
										CodeHelper.patch2.push(new Integer(Code.pc - 2));
										Code.fixup(CodeHelper.patch.pop());
									}
		  						:};
		  						
Unmatched ::= 				UnmatchedIfStatement;						

UnmatchedIfStatement ::= 	IF LEFTPAREN ConditionTerm RIGHTPAREN Statement 
					 			{: 
									if (CodeHelper.cond.pop().booleanValue()) {
										Code.fixup(CodeHelper.patch.pop()); 
									}
								:}
					 		|
					 		IfMatched Unmatched 
					 			{: 
									if (CodeHelper.cond.pop().booleanValue()) {
										Code.fixup(CodeHelper.patch2.pop());
									}
								:}; 				
				
//-------------------------------------------------------------------------------------------------------					
					
ConditionTerm ::= 	Condition:result 
						{:
							Code.loadConst(1);
							Code.putFalseJump(Code.eq, 0);
							CodeHelper.patch.push(new Integer(Code.pc - 2));
							CodeHelper.cond.push(new Boolean(true));
						:};					
					
Condition ::=		Condition:left LOGICALOR CondTerm:right
						{: 
							if (!validator.boolTypes(left, right)) parser.report_error("Tipovi moraju biti kompatibilni [" + rightleft + "]", null);					
							else codeHelper.checkCond(1);	 
							RESULT = right;
		 				:};

Condition ::= 		CondTerm:o {: RESULT = o; :};
		 		
Condition ::= 		error:e {: helper.oporavak(eleft); :};
	
//-------------------------------------------------------------------------------------------------------			
			
CondTerm ::= 	CondTerm:left LOGICALAND CondFact:right
					{:	 					
						if (!validator.boolTypes(left, right)) parser.report_error("Tipovi moraju biti kompatibilni [" + rightleft + "]", null);					
						else codeHelper.checkCond(0);							
						RESULT = right;
	 				:};

CondTerm ::= 	CondFact:o {: RESULT = o; :};
				
//-------------------------------------------------------------------------------------------------------			

CondFact ::= 	Expr:expr {: RESULT = expr; :};
 				
CondFact ::=	Expr:left Relop:opcode Expr:right {: RESULT = codeHelper.relop(left, opcode, right, rightleft); :};

Relop ::= 		EQUAL {: RESULT = Code.eq; :} | NOTEQUAL {: RESULT = Code.ne; :} | GREATER {: RESULT = Code.gt; :} | GREATEREQUAL {: RESULT = Code.ge; :} | LESS {: RESULT = Code.lt; :} | LESSEQUAL {: RESULT = Code.le; :};							
											
//-------------------------------------------------------------------------------------------------------	
	
// ---	
// --- FOR Loop
// ---

//-------------------------------------------------------------------------------------------------------		

ForStarted ::= 			{: 	
							Helper.inFor = true;
							CodeHelper.inFor.push(true);
							CodeHelper.continueFound.push(false);							
						:};

ForOver ::= 			{: 
							CodeHelper.inFor.pop();
							CodeHelper.continueFound.pop();
							if (CodeHelper.inFor.isEmpty()) Helper.inFor = false; 
						:};

OptForInit ::= 			DesignatorStatement | /* epsilon */ | error:e {: helper.oporavak(eleft); :};

OptForIncr ::= 			DesignatorStatement | /* epsilon */ | error:e {: helper.oporavak(eleft); :};

OptForCondition ::= 	Condition:result {: Code.loadConst(1); :} | /* epsilon */ {: Code.loadConst(1); Code.loadConst(1); :};

Statement ::=   		ForStarted
						FOR LEFTPAREN OptForInit SEMI_COMMA
							{:
								CodeHelper.loopCondition.push(Code.pc);															
							:}
						OptForCondition
							{:																					
								Code.putFalseJump(Code.ne, 0);																						
								CodeHelper.loopBody.push(Code.pc - 2);										
								CodeHelper.breakDest.push(Code.pc);								
								Code.putJump(0);
								CodeHelper.loopEnd.push(Code.pc - 2);
							:}						
						SEMI_COMMA
							{:
								CodeHelper.loopInc.push(Code.pc);
							:}
						OptForIncr 
							{:		
								Code.putJump(CodeHelper.loopCondition.pop().intValue());
							:}
						RIGHTPAREN
							{: 
								Code.fixup(CodeHelper.loopBody.pop().intValue());
							:}
						Statement
							{:					

								if (CodeHelper.continueFound.peek().booleanValue() == true) {
									CodeHelper.continueFound.pop();
									System.out.println("fixujem jednu");
									Code.fixup(CodeHelper.continueDest.pop().intValue());									
								}	
								
								Code.putJump(CodeHelper.loopInc.pop().intValue());																				
							:}
						ForOver
							{:
								Code.fixup(CodeHelper.loopEnd.pop().intValue());
							:};

Statement ::=			CONTINUE SEMI_COMMA:s 
							{: 
								if (!Helper.inFor) parser.report_error("Morate biti u FOR petlji [" + sleft + "]", null);
								else {																	
									Code.putJump(0);
									CodeHelper.continueDest.push(Code.pc - 2);
									CodeHelper.continueFound.push(true);																	
								}								
							:};

Statement ::=			BREAK SEMI_COMMA:s 
							{: 
								if (!Helper.inFor) parser.report_error("Morate biti u FOR petlji [" + sleft + "]", null);
								else {
									Code.putJump(CodeHelper.breakDest.pop().intValue());
								}								
							:};



 
 
 
 
 
 
 
 
 
 
 
 



							
							
															
								
							
							
							
							
							
							
							
							
							
							
							
							
							
							
							
									
									
														