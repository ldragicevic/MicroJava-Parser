
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Jan 21 02:52:29 CET 2017
//----------------------------------------------------

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import java.io.*;
import rs.etf.pp1.symboltable.Tab;
import rs.etf.pp1.symboltable.concepts.*;
import rs.etf.pp1.mj.runtime.Code;
import rs.etf.pp1.mj.runtime.Run;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Jan 21 02:52:29 CET 2017
  */
public class MJParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MJParser() {super();}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\244\000\002\024\010\000\002\002\004\000\002\004" +
    "\003\000\002\025\004\000\002\025\002\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\002\003\000" +
    "\002\027\006\000\002\030\005\000\002\030\003\000\002" +
    "\030\003\000\002\031\005\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\032\005\000\002\032\005" +
    "\000\002\033\003\000\002\033\005\000\002\033\005\000" +
    "\002\034\003\000\002\034\005\000\002\043\004\000\002" +
    "\043\002\000\002\105\002\000\002\044\016\000\002\106" +
    "\002\000\002\044\016\000\002\045\003\000\002\045\002" +
    "\000\002\046\003\000\002\046\003\000\002\047\003\000" +
    "\002\072\004\000\002\072\002\000\002\103\005\000\002" +
    "\103\004\000\002\102\003\000\002\102\005\000\002\104" +
    "\003\000\002\104\005\000\002\071\002\000\002\070\003" +
    "\000\002\070\002\000\002\050\003\000\002\050\005\000" +
    "\002\050\003\000\002\051\004\000\002\051\006\000\002" +
    "\052\010\000\002\052\012\000\002\053\003\000\002\054" +
    "\003\000\002\054\003\000\002\067\003\000\002\065\005" +
    "\000\002\065\002\000\002\055\004\000\002\055\002\000" +
    "\002\056\003\000\002\056\003\000\002\057\003\000\002" +
    "\057\003\000\002\057\003\000\002\057\003\000\002\057" +
    "\003\000\002\066\004\000\002\066\003\000\002\040\005" +
    "\000\002\036\007\000\002\037\010\000\002\062\004\000" +
    "\002\062\002\000\002\006\004\000\002\107\002\000\002" +
    "\005\006\000\002\005\003\000\002\061\004\000\002\061" +
    "\004\000\002\110\002\000\002\005\007\000\002\061\005" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\061\005\000\002\010\003\000\002\010\004\000\002" +
    "\015\005\000\002\015\005\000\002\015\003\000\002\014" +
    "\005\000\002\014\003\000\002\007\005\000\002\007\005" +
    "\000\002\007\003\000\002\020\003\000\002\020\003\000" +
    "\002\021\003\000\002\021\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\007\000" +
    "\002\006\005\000\002\111\002\000\002\061\007\000\002" +
    "\006\006\000\002\112\002\000\002\006\007\000\002\064" +
    "\003\000\002\064\002\000\002\063\003\000\002\063\005" +
    "\000\002\035\004\000\002\035\005\000\002\057\003\000" +
    "\002\073\004\000\002\074\010\000\002\060\003\000\002" +
    "\076\007\000\002\076\004\000\002\075\003\000\002\012" +
    "\005\000\002\012\003\000\002\012\003\000\002\011\005" +
    "\000\002\011\003\000\002\013\003\000\002\013\005\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\041" +
    "\002\000\002\042\002\000\002\077\003\000\002\077\002" +
    "\000\002\077\003\000\002\101\003\000\002\101\002\000" +
    "\002\101\003\000\002\100\003\000\002\100\002\000\002" +
    "\113\002\000\002\114\002\000\002\115\002\000\002\116" +
    "\002\000\002\117\002\000\002\120\002\000\002\056\023" +
    "\000\002\056\004\000\002\056\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0103\000\004\004\005\001\002\000\004\002\u0105\001" +
    "\002\000\004\061\006\001\002\000\012\006\uffff\012\uffff" +
    "\057\uffff\061\uffff\001\002\000\012\006\ufffd\012\ufffd\057" +
    "\ufffd\061\ufffd\001\002\000\012\006\017\012\021\057\020" +
    "\061\013\001\002\000\006\003\371\061\372\001\002\000" +
    "\012\006\ufffe\012\ufffe\057\ufffe\061\ufffe\001\002\000\066" +
    "\003\ufff9\023\ufff9\024\ufff9\026\ufff9\027\ufff9\030\ufff9\031" +
    "\ufff9\032\ufff9\033\ufff9\034\ufff9\035\ufff9\036\ufff9\037\ufff9" +
    "\043\ufff9\044\ufff9\045\ufff9\046\ufff9\047\ufff9\050\ufff9\051" +
    "\ufff9\052\ufff9\054\ufff9\055\ufff9\056\ufff9\061\ufff9\065\ufff9" +
    "\001\002\000\012\006\ufffb\012\ufffb\057\ufffb\061\ufffb\001" +
    "\002\000\012\006\ufffa\012\ufffa\057\ufffa\061\ufffa\001\002" +
    "\000\012\006\ufffc\012\ufffc\057\ufffc\061\ufffc\001\002\000" +
    "\004\061\350\001\002\000\012\017\uffe8\022\uffe8\060\uffe8" +
    "\061\uffe8\001\002\000\004\061\013\001\002\000\006\003" +
    "\024\061\026\001\002\000\006\023\035\024\034\001\002" +
    "\000\006\023\ufff5\024\ufff5\001\002\000\006\023\ufff6\024" +
    "\ufff6\001\002\000\004\040\027\001\002\000\010\062\032" +
    "\063\030\064\033\001\002\000\006\023\ufff3\024\ufff3\001" +
    "\002\000\006\023\ufff4\024\ufff4\001\002\000\006\023\ufff1" +
    "\024\ufff1\001\002\000\006\023\ufff2\024\ufff2\001\002\000" +
    "\004\061\026\001\002\000\012\006\ufff8\012\ufff8\057\ufff8" +
    "\061\ufff8\001\002\000\006\023\ufff7\024\ufff7\001\002\000" +
    "\012\017\uffe2\022\041\060\043\061\uffe2\001\002\000\006" +
    "\017\046\061\013\001\002\000\006\017\uffe3\061\uffe3\001" +
    "\002\000\012\017\uffe9\022\uffe9\060\uffe9\061\uffe9\001\002" +
    "\000\004\002\001\001\002\000\004\061\047\001\002\000" +
    "\004\061\uffe0\001\002\000\004\061\uffe1\001\002\000\004" +
    "\053\uffdf\001\002\000\004\053\051\001\002\000\010\003" +
    "\053\054\uffd4\061\013\001\002\000\004\061\344\001\002" +
    "\000\006\024\uffd1\054\uffd1\001\002\000\004\054\uffd6\001" +
    "\002\000\006\024\uffd3\054\uffd3\001\002\000\006\024\057" +
    "\054\uffd5\001\002\000\004\061\013\001\002\000\006\024" +
    "\uffd2\054\uffd2\001\002\000\004\054\062\001\002\000\010" +
    "\003\065\057\uffdd\061\013\001\002\000\010\057\uffdd\060" +
    "\uffdd\061\013\001\002\000\006\003\332\061\335\001\002" +
    "\000\004\057\uffe5\001\002\000\004\057\uffe7\001\002\000" +
    "\004\057\070\001\002\000\030\003\uffc5\005\uffc5\007\uffc5" +
    "\011\uffc5\014\uffc5\015\uffc5\016\uffc5\020\uffc5\057\uffc5\060" +
    "\uffc5\061\uffc5\001\002\000\030\003\111\005\106\007\104" +
    "\011\076\014\112\015\074\016\103\020\uff70\057\116\060" +
    "\115\061\100\001\002\000\020\003\111\007\104\014\112" +
    "\015\074\016\103\057\116\061\100\001\002\000\030\025" +
    "\uffb5\033\214\034\206\035\215\036\212\037\210\040\316" +
    "\041\311\042\315\053\uff8f\055\uffb0\001\002\000\004\053" +
    "\304\001\002\000\032\003\uff84\005\uff84\007\uff84\010\uff84" +
    "\011\uff84\014\uff84\015\uff84\016\uff84\020\uff84\057\uff84\060" +
    "\uff84\061\uff84\001\002\000\004\023\303\001\002\000\004" +
    "\020\256\001\002\000\074\023\uffb3\024\uffb3\025\uffb3\026" +
    "\uffb3\027\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3" +
    "\035\uffb3\036\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3\043" +
    "\uffb3\044\uffb3\045\uffb3\046\uffb3\047\uffb3\050\uffb3\051\uffb3" +
    "\052\uffb3\053\uffb3\054\uffb3\055\uffb3\056\uffb3\065\uffb3\001" +
    "\002\000\004\023\255\001\002\000\030\003\uff81\005\uff81" +
    "\007\uff81\011\uff81\014\uff81\015\uff81\016\uff81\020\uff81\057" +
    "\uff81\060\uff81\061\uff81\001\002\000\022\013\131\023\253" +
    "\027\125\053\140\061\100\062\134\063\133\064\135\001" +
    "\002\000\004\053\223\001\002\000\032\003\uffbf\005\uffbf" +
    "\007\uffbf\010\uffbf\011\uffbf\014\uffbf\015\uffbf\016\uffbf\020" +
    "\uffbf\057\uffbf\060\uffbf\061\uffbf\001\002\000\004\023\222" +
    "\001\002\000\032\003\uffc1\005\uffc1\007\uffc1\010\uffc1\011" +
    "\uffc1\014\uffc1\015\uffc1\016\uffc1\020\uffc1\057\uffc1\060\uffc1" +
    "\061\uffc1\001\002\000\030\003\uffc3\005\uffc3\007\uffc3\011" +
    "\uffc3\014\uffc3\015\uffc3\016\uffc3\020\uffc3\057\uffc3\060\uffc3" +
    "\061\uffc3\001\002\000\032\003\uffbc\005\uffbc\007\uffbc\010" +
    "\uffbc\011\uffbc\014\uffbc\015\uffbc\016\uffbc\020\uffbc\057\uffbc" +
    "\060\uffbc\061\uffbc\001\002\000\004\053\124\001\002\000" +
    "\032\003\uffc2\005\uffc2\007\uffc2\010\uffc2\011\uffc2\014\uffc2" +
    "\015\uffc2\016\uffc2\020\uffc2\057\uffc2\060\uffc2\061\uffc2\001" +
    "\002\000\030\003\uffc6\005\uffc6\007\uffc6\011\uffc6\014\uffc6" +
    "\015\uffc6\016\uffc6\020\uffc6\057\uffc6\060\uffc6\061\uffc6\001" +
    "\002\000\012\017\uffe6\022\uffe6\060\uffe6\061\uffe6\001\002" +
    "\000\030\003\uffc5\005\uffc5\007\uffc5\011\uffc5\014\uffc5\015" +
    "\uffc5\016\uffc5\020\uffc5\057\uffc5\060\uffc5\061\uffc5\001\002" +
    "\000\030\003\uffc4\005\uffc4\007\uffc4\011\uffc4\014\uffc4\015" +
    "\uffc4\016\uffc4\020\uffc4\057\uffc4\060\uffc4\061\uffc4\001\002" +
    "\000\032\003\uffbe\005\uffbe\007\uffbe\010\uffbe\011\uffbe\014" +
    "\uffbe\015\uffbe\016\uffbe\020\uffbe\057\uffbe\060\uffbe\061\uffbe" +
    "\001\002\000\032\003\uffc0\005\uffc0\007\uffc0\010\uffc0\011" +
    "\uffc0\014\uffc0\015\uffc0\016\uffc0\020\uffc0\057\uffc0\060\uffc0" +
    "\061\uffc0\001\002\000\030\003\111\005\106\007\104\011" +
    "\076\014\112\015\074\016\103\020\uff70\057\116\060\123" +
    "\061\100\001\002\000\032\003\uffbb\005\uffbb\007\uffbb\010" +
    "\uffbb\011\uffbb\014\uffbb\015\uffbb\016\uffbb\020\uffbb\057\uffbb" +
    "\060\uffbb\061\uffbb\001\002\000\020\013\131\027\125\053" +
    "\140\061\100\062\134\063\133\064\135\001\002\000\016" +
    "\013\131\053\140\061\100\062\134\063\133\064\135\001" +
    "\002\000\032\023\uffa9\024\uffa9\043\uffa9\044\uffa9\045\uffa9" +
    "\046\uffa9\047\uffa9\050\uffa9\051\uffa9\052\uffa9\054\uffa9\056" +
    "\uffa9\001\002\000\050\023\uffa5\024\uffa5\026\213\027\204" +
    "\033\214\034\206\035\215\036\212\037\210\043\uffa5\044" +
    "\uffa5\045\uffa5\046\uffa5\047\uffa5\050\uffa5\051\uffa5\052\uffa5" +
    "\054\uffa5\056\uffa5\001\002\000\006\024\177\054\uffb7\001" +
    "\002\000\004\061\013\001\002\000\066\023\uff95\024\uff95" +
    "\025\uffb5\026\uff95\027\uff95\030\uff95\031\uff95\032\uff95\033" +
    "\uff95\034\uff95\035\uff95\036\uff95\037\uff95\043\uff95\044\uff95" +
    "\045\uff95\046\uff95\047\uff95\050\uff95\051\uff95\052\uff95\053" +
    "\154\054\uff95\055\uffb0\056\uff95\065\uff95\001\002\000\060" +
    "\023\uff94\024\uff94\026\uff94\027\uff94\030\uff94\031\uff94\032" +
    "\uff94\033\uff94\034\uff94\035\uff94\036\uff94\037\uff94\043\uff94" +
    "\044\uff94\045\uff94\046\uff94\047\uff94\050\uff94\051\uff94\052" +
    "\uff94\054\uff94\056\uff94\065\uff94\001\002\000\060\023\uff92" +
    "\024\uff92\026\uff92\027\uff92\030\uff92\031\uff92\032\uff92\033" +
    "\uff92\034\uff92\035\uff92\036\uff92\037\uff92\043\uff92\044\uff92" +
    "\045\uff92\046\uff92\047\uff92\050\uff92\051\uff92\052\uff92\054" +
    "\uff92\056\uff92\065\uff92\001\002\000\060\023\uff93\024\uff93" +
    "\026\uff93\027\uff93\030\uff93\031\uff93\032\uff93\033\uff93\034" +
    "\uff93\035\uff93\036\uff93\037\uff93\043\uff93\044\uff93\045\uff93" +
    "\046\uff93\047\uff93\050\uff93\051\uff93\052\uff93\054\uff93\056" +
    "\uff93\065\uff93\001\002\000\060\023\uffa3\024\uffa3\026\uffa3" +
    "\027\uffa3\030\145\031\146\032\143\033\uffa3\034\uffa3\035" +
    "\uffa3\036\uffa3\037\uffa3\043\uffa3\044\uffa3\045\uffa3\046\uffa3" +
    "\047\uffa3\050\uffa3\051\uffa3\052\uffa3\054\uffa3\056\uffa3\065" +
    "\144\001\002\000\060\023\uffa0\024\uffa0\026\uffa0\027\uffa0" +
    "\030\uffa0\031\uffa0\032\uffa0\033\uffa0\034\uffa0\035\uffa0\036" +
    "\uffa0\037\uffa0\043\uffa0\044\uffa0\045\uffa0\046\uffa0\047\uffa0" +
    "\050\uffa0\051\uffa0\052\uffa0\054\uffa0\056\uffa0\065\uffa0\001" +
    "\002\000\020\013\131\027\125\053\140\061\100\062\134" +
    "\063\133\064\135\001\002\000\004\054\142\001\002\000" +
    "\060\023\uff90\024\uff90\026\uff90\027\uff90\030\uff90\031\uff90" +
    "\032\uff90\033\uff90\034\uff90\035\uff90\036\uff90\037\uff90\043" +
    "\uff90\044\uff90\045\uff90\046\uff90\047\uff90\050\uff90\051\uff90" +
    "\052\uff90\054\uff90\056\uff90\065\uff90\001\002\000\016\013" +
    "\uff99\053\uff99\061\uff99\062\uff99\063\uff99\064\uff99\001\002" +
    "\000\016\013\131\053\140\061\100\062\134\063\133\064" +
    "\135\001\002\000\016\013\uff9b\053\uff9b\061\uff9b\062\uff9b" +
    "\063\uff9b\064\uff9b\001\002\000\016\013\uff9a\053\uff9a\061" +
    "\uff9a\062\uff9a\063\uff9a\064\uff9a\001\002\000\016\013\131" +
    "\053\140\061\100\062\134\063\133\064\135\001\002\000" +
    "\060\023\uffa2\024\uffa2\026\uffa2\027\uffa2\030\uffa2\031\uffa2" +
    "\032\uffa2\033\uffa2\034\uffa2\035\uffa2\036\uffa2\037\uffa2\043" +
    "\uffa2\044\uffa2\045\uffa2\046\uffa2\047\uffa2\050\uffa2\051\uffa2" +
    "\052\uffa2\054\uffa2\056\uffa2\065\uffa2\001\002\000\060\023" +
    "\uffa1\024\uffa1\026\uffa1\027\uffa1\030\uffa1\031\uffa1\032\uffa1" +
    "\033\uffa1\034\uffa1\035\uffa1\036\uffa1\037\uffa1\043\uffa1\044" +
    "\uffa1\045\uffa1\046\uffa1\047\uffa1\050\uffa1\051\uffa1\052\uffa1" +
    "\054\uffa1\056\uffa1\065\uffa1\001\002\000\004\055\170\001" +
    "\002\000\004\025\166\001\002\000\024\003\157\013\131" +
    "\027\125\053\140\054\uff89\061\100\062\134\063\133\064" +
    "\135\001\002\000\006\024\uff88\054\uff88\001\002\000\006" +
    "\024\164\054\uff8a\001\002\000\004\054\uff8c\001\002\000" +
    "\004\054\161\001\002\000\060\023\uff8d\024\uff8d\026\uff8d" +
    "\027\uff8d\030\uff8d\031\uff8d\032\uff8d\033\uff8d\034\uff8d\035" +
    "\uff8d\036\uff8d\037\uff8d\043\uff8d\044\uff8d\045\uff8d\046\uff8d" +
    "\047\uff8d\050\uff8d\051\uff8d\052\uff8d\054\uff8d\056\uff8d\065" +
    "\uff8d\001\002\000\004\054\163\001\002\000\060\023\uff8b" +
    "\024\uff8b\026\uff8b\027\uff8b\030\uff8b\031\uff8b\032\uff8b\033" +
    "\uff8b\034\uff8b\035\uff8b\036\uff8b\037\uff8b\043\uff8b\044\uff8b" +
    "\045\uff8b\046\uff8b\047\uff8b\050\uff8b\051\uff8b\052\uff8b\054" +
    "\uff8b\056\uff8b\065\uff8b\001\002\000\020\013\131\027\125" +
    "\053\140\061\100\062\134\063\133\064\135\001\002\000" +
    "\006\024\uff87\054\uff87\001\002\000\004\061\167\001\002" +
    "\000\074\023\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffb4\030" +
    "\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4\035\uffb4\036\uffb4" +
    "\037\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4\045" +
    "\uffb4\046\uffb4\047\uffb4\050\uffb4\051\uffb4\052\uffb4\053\uffb4" +
    "\054\uffb4\055\uffb4\056\uffb4\065\uffb4\001\002\000\020\013" +
    "\131\027\125\053\140\061\100\062\134\063\133\064\135" +
    "\001\002\000\004\056\172\001\002\000\074\023\uffaf\024" +
    "\uffaf\025\uffaf\026\uffaf\027\uffaf\030\uffaf\031\uffaf\032\uffaf" +
    "\033\uffaf\034\uffaf\035\uffaf\036\uffaf\037\uffaf\040\uffaf\041" +
    "\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf\046\uffaf\047\uffaf" +
    "\050\uffaf\051\uffaf\052\uffaf\053\uffaf\054\uffaf\055\uffaf\056" +
    "\uffaf\065\uffaf\001\002\000\062\023\uffb6\024\uffb6\026\uffb6" +
    "\027\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035" +
    "\uffb6\036\uffb6\037\uffb6\043\uffb6\044\uffb6\045\uffb6\046\uffb6" +
    "\047\uffb6\050\uffb6\051\uffb6\052\uffb6\054\uffb6\055\174\056" +
    "\uffb6\065\uffb6\001\002\000\020\013\131\027\125\053\140" +
    "\061\100\062\134\063\133\064\135\001\002\000\004\056" +
    "\176\001\002\000\060\023\uff91\024\uff91\026\uff91\027\uff91" +
    "\030\uff91\031\uff91\032\uff91\033\uff91\034\uff91\035\uff91\036" +
    "\uff91\037\uff91\043\uff91\044\uff91\045\uff91\046\uff91\047\uff91" +
    "\050\uff91\051\uff91\052\uff91\054\uff91\056\uff91\065\uff91\001" +
    "\002\000\004\063\203\001\002\000\004\054\201\001\002" +
    "\000\004\023\202\001\002\000\032\003\uffb9\005\uffb9\007" +
    "\uffb9\010\uffb9\011\uffb9\014\uffb9\015\uffb9\016\uffb9\020\uffb9" +
    "\057\uffb9\060\uffb9\061\uffb9\001\002\000\004\054\uffb8\001" +
    "\002\000\016\013\uff9e\053\uff9e\061\uff9e\062\uff9e\063\uff9e" +
    "\064\uff9e\001\002\000\016\013\131\053\140\061\100\062" +
    "\134\063\133\064\135\001\002\000\022\003\uff9c\013\uff9c" +
    "\027\uff9c\053\uff9c\061\uff9c\062\uff9c\063\uff9c\064\uff9c\001" +
    "\002\000\016\013\131\053\140\061\100\062\134\063\133" +
    "\064\135\001\002\000\022\003\uff96\013\uff96\027\uff96\053" +
    "\uff96\061\uff96\062\uff96\063\uff96\064\uff96\001\002\000\016" +
    "\013\131\053\140\061\100\062\134\063\133\064\135\001" +
    "\002\000\022\003\uff97\013\uff97\027\uff97\053\uff97\061\uff97" +
    "\062\uff97\063\uff97\064\uff97\001\002\000\016\013\uff9f\053" +
    "\uff9f\061\uff9f\062\uff9f\063\uff9f\064\uff9f\001\002\000\022" +
    "\003\uff9d\013\uff9d\027\uff9d\053\uff9d\061\uff9d\062\uff9d\063" +
    "\uff9d\064\uff9d\001\002\000\022\003\uff98\013\uff98\027\uff98" +
    "\053\uff98\061\uff98\062\uff98\063\uff98\064\uff98\001\002\000" +
    "\060\023\uffa4\024\uffa4\026\uffa4\027\uffa4\030\145\031\146" +
    "\032\143\033\uffa4\034\uffa4\035\uffa4\036\uffa4\037\uffa4\043" +
    "\uffa4\044\uffa4\045\uffa4\046\uffa4\047\uffa4\050\uffa4\051\uffa4" +
    "\052\uffa4\054\uffa4\056\uffa4\065\144\001\002\000\032\023" +
    "\uffa7\024\uffa7\043\uffa7\044\uffa7\045\uffa7\046\uffa7\047\uffa7" +
    "\050\uffa7\051\uffa7\052\uffa7\054\uffa7\056\uffa7\001\002\000" +
    "\032\023\uffa6\024\uffa6\043\uffa6\044\uffa6\045\uffa6\046\uffa6" +
    "\047\uffa6\050\uffa6\051\uffa6\052\uffa6\054\uffa6\056\uffa6\001" +
    "\002\000\032\023\uffa8\024\uffa8\043\uffa8\044\uffa8\045\uffa8" +
    "\046\uffa8\047\uffa8\050\uffa8\051\uffa8\052\uffa8\054\uffa8\056" +
    "\uffa8\001\002\000\030\003\uff5e\005\uff5e\007\uff5e\011\uff5e" +
    "\014\uff5e\015\uff5e\016\uff5e\020\uff5e\057\uff5e\060\uff5e\061" +
    "\uff5e\001\002\000\022\003\226\013\131\027\125\053\140" +
    "\061\100\062\134\063\133\064\135\001\002\000\012\023" +
    "\uff79\051\uff79\052\uff79\054\uff79\001\002\000\026\023\uff78" +
    "\043\244\044\247\045\242\046\245\047\246\050\243\051" +
    "\uff78\052\uff78\054\uff78\001\002\000\010\023\uff7b\052\uff7b" +
    "\054\uff7b\001\002\000\012\023\uff7c\051\240\052\uff7c\054" +
    "\uff7c\001\002\000\006\052\236\054\uff7e\001\002\000\004" +
    "\054\232\001\002\000\026\003\111\005\106\007\104\011" +
    "\076\014\112\015\074\016\103\020\uff70\057\116\061\100" +
    "\001\002\000\030\003\uff80\005\uff80\007\uff80\011\uff80\014" +
    "\uff80\015\uff80\016\uff80\020\uff80\057\uff80\060\uff80\061\uff80" +
    "\001\002\000\032\003\uffc4\005\uffc4\007\uffc4\010\235\011" +
    "\uffc4\014\uffc4\015\uffc4\016\uffc4\020\uffc4\057\uffc4\060\uffc4" +
    "\061\uffc4\001\002\000\020\003\uff82\007\uff82\014\uff82\015" +
    "\uff82\016\uff82\057\uff82\061\uff82\001\002\000\020\013\131" +
    "\027\125\053\140\061\100\062\134\063\133\064\135\001" +
    "\002\000\012\023\uff7d\051\240\052\uff7d\054\uff7d\001\002" +
    "\000\020\013\131\027\125\053\140\061\100\062\134\063" +
    "\133\064\135\001\002\000\012\023\uff7a\051\uff7a\052\uff7a" +
    "\054\uff7a\001\002\000\020\013\uff74\027\uff74\053\uff74\061" +
    "\uff74\062\uff74\063\uff74\064\uff74\001\002\000\020\013\uff71" +
    "\027\uff71\053\uff71\061\uff71\062\uff71\063\uff71\064\uff71\001" +
    "\002\000\020\013\uff76\027\uff76\053\uff76\061\uff76\062\uff76" +
    "\063\uff76\064\uff76\001\002\000\020\013\uff73\027\uff73\053" +
    "\uff73\061\uff73\062\uff73\063\uff73\064\uff73\001\002\000\020" +
    "\013\uff72\027\uff72\053\uff72\061\uff72\062\uff72\063\uff72\064" +
    "\uff72\001\002\000\020\013\uff75\027\uff75\053\uff75\061\uff75" +
    "\062\uff75\063\uff75\064\uff75\001\002\000\020\013\131\027" +
    "\125\053\140\061\100\062\134\063\133\064\135\001\002" +
    "\000\012\023\uff77\051\uff77\052\uff77\054\uff77\001\002\000" +
    "\004\023\254\001\002\000\032\003\uff86\005\uff86\007\uff86" +
    "\010\uff86\011\uff86\014\uff86\015\uff86\016\uff86\020\uff86\057" +
    "\uff86\060\uff86\061\uff86\001\002\000\032\003\uff85\005\uff85" +
    "\007\uff85\010\uff85\011\uff85\014\uff85\015\uff85\016\uff85\020" +
    "\uff85\057\uff85\060\uff85\061\uff85\001\002\000\032\003\uffbd" +
    "\005\uffbd\007\uffbd\010\uffbd\011\uffbd\014\uffbd\015\uffbd\016" +
    "\uffbd\020\uffbd\057\uffbd\060\uffbd\061\uffbd\001\002\000\004" +
    "\053\257\001\002\000\010\003\260\023\uff6d\061\100\001" +
    "\002\000\004\023\uff6c\001\002\000\004\023\uff6e\001\002" +
    "\000\004\023\263\001\002\000\024\003\uff66\013\uff66\023" +
    "\uff66\027\uff66\053\uff66\061\uff66\062\uff66\063\uff66\064\uff66" +
    "\001\002\000\024\003\226\013\131\023\uff67\027\125\053" +
    "\140\061\100\062\134\063\133\064\135\001\002\000\006" +
    "\023\uff68\052\236\001\002\000\004\023\uff65\001\002\000" +
    "\004\023\270\001\002\000\010\003\uff64\054\uff64\061\uff64" +
    "\001\002\000\010\003\272\054\uff6a\061\100\001\002\000" +
    "\004\054\uff69\001\002\000\004\054\uff6b\001\002\000\004" +
    "\054\uff63\001\002\000\004\054\276\001\002\000\026\003" +
    "\uff62\005\uff62\007\uff62\011\uff62\014\uff62\015\uff62\016\uff62" +
    "\020\uff62\057\uff62\061\uff62\001\002\000\026\003\111\005" +
    "\106\007\104\011\076\014\112\015\074\016\103\020\uff70" +
    "\057\116\061\100\001\002\000\030\003\uff61\005\uff61\007" +
    "\uff61\011\uff61\014\uff61\015\uff61\016\uff61\020\uff61\057\uff61" +
    "\060\uff61\061\uff61\001\002\000\030\003\uff6f\005\uff6f\007" +
    "\uff6f\011\uff6f\014\uff6f\015\uff6f\016\uff6f\020\uff6f\057\uff6f" +
    "\060\uff6f\061\uff6f\001\002\000\030\003\uff60\005\uff60\007" +
    "\uff60\011\uff60\014\uff60\015\uff60\016\uff60\020\uff60\057\uff60" +
    "\060\uff60\061\uff60\001\002\000\030\003\uff5f\005\uff5f\007" +
    "\uff5f\011\uff5f\014\uff5f\015\uff5f\016\uff5f\020\uff5f\057\uff5f" +
    "\060\uff5f\061\uff5f\001\002\000\004\061\100\001\002\000" +
    "\010\025\uffb5\054\306\055\uffb0\001\002\000\004\023\307" +
    "\001\002\000\032\003\uffba\005\uffba\007\uffba\010\uffba\011" +
    "\uffba\014\uffba\015\uffba\016\uffba\020\uffba\057\uffba\060\uffba" +
    "\061\uffba\001\002\000\022\003\uffab\013\uffab\027\uffab\053" +
    "\uffab\061\uffab\062\uffab\063\uffab\064\uffab\001\002\000\006" +
    "\023\uffb2\054\uffb2\001\002\000\004\053\321\001\002\000" +
    "\022\003\uffac\013\uffac\027\uffac\053\uffac\061\uffac\062\uffac" +
    "\063\uffac\064\uffac\001\002\000\022\003\320\013\131\027" +
    "\125\053\140\061\100\062\134\063\133\064\135\001\002" +
    "\000\006\023\uffb1\054\uffb1\001\002\000\022\003\uffad\013" +
    "\uffad\027\uffad\053\uffad\061\uffad\062\uffad\063\uffad\064\uffad" +
    "\001\002\000\006\023\uffae\054\uffae\001\002\000\006\023" +
    "\uffaa\054\uffaa\001\002\000\022\013\131\027\125\053\140" +
    "\054\uff89\061\100\062\134\063\133\064\135\001\002\000" +
    "\004\054\323\001\002\000\006\023\uff8e\054\uff8e\001\002" +
    "\000\030\003\uff7f\005\uff7f\007\uff7f\011\uff7f\014\uff7f\015" +
    "\uff7f\016\uff7f\020\uff7f\057\uff7f\060\uff7f\061\uff7f\001\002" +
    "\000\032\003\uff83\005\uff83\007\uff83\010\uff83\011\uff83\014" +
    "\uff83\015\uff83\016\uff83\020\uff83\057\uff83\060\uff83\061\uff83" +
    "\001\002\000\004\057\327\001\002\000\030\003\uffc5\005" +
    "\uffc5\007\uffc5\011\uffc5\014\uffc5\015\uffc5\016\uffc5\020\uffc5" +
    "\057\uffc5\060\uffc5\061\uffc5\001\002\000\030\003\111\005" +
    "\106\007\104\011\076\014\112\015\074\016\103\020\uff70" +
    "\057\116\060\331\061\100\001\002\000\012\017\uffe4\022" +
    "\uffe4\060\uffe4\061\uffe4\001\002\000\010\057\uffdb\060\uffdb" +
    "\061\uffdb\001\002\000\006\023\uffda\024\uffda\001\002\000" +
    "\006\023\341\024\340\001\002\000\010\023\uffd8\024\uffd8" +
    "\055\336\001\002\000\004\056\337\001\002\000\006\023" +
    "\uffd7\024\uffd7\001\002\000\004\061\335\001\002\000\010" +
    "\057\uffdc\060\uffdc\061\uffdc\001\002\000\006\023\uffd9\024" +
    "\uffd9\001\002\000\006\057\uffde\060\uffde\001\002\000\010" +
    "\024\uffd0\054\uffd0\055\345\001\002\000\004\056\346\001" +
    "\002\000\006\024\uffcf\054\uffcf\001\002\000\006\021\351" +
    "\057\352\001\002\000\006\021\uffcc\057\uffcc\001\002\000" +
    "\006\003\362\061\363\001\002\000\010\057\uffdd\060\uffdd" +
    "\061\013\001\002\000\006\057\uffc9\060\uffc9\001\002\000" +
    "\006\057\355\060\uffc7\001\002\000\012\017\uffe8\022\uffe8" +
    "\060\uffe8\061\uffe8\001\002\000\004\060\357\001\002\000" +
    "\012\006\uffce\012\uffce\057\uffce\061\uffce\001\002\000\012" +
    "\017\uffe2\022\041\060\361\061\uffe2\001\002\000\004\060" +
    "\uffc8\001\002\000\004\057\uffca\001\002\000\004\057\uffcb" +
    "\001\002\000\004\057\365\001\002\000\010\057\uffdd\060" +
    "\uffdd\061\013\001\002\000\006\057\355\060\uffc7\001\002" +
    "\000\004\060\370\001\002\000\012\006\uffcd\012\uffcd\057" +
    "\uffcd\061\uffcd\001\002\000\006\023\u0103\024\u0102\001\002" +
    "\000\010\023\uffeb\024\uffeb\055\u0100\001\002\000\006\023" +
    "\376\024\375\001\002\000\006\023\uffee\024\uffee\001\002" +
    "\000\004\061\372\001\002\000\012\006\ufff0\012\ufff0\057" +
    "\ufff0\061\ufff0\001\002\000\006\023\uffed\024\uffed\001\002" +
    "\000\004\056\u0101\001\002\000\006\023\uffea\024\uffea\001" +
    "\002\000\004\061\372\001\002\000\012\006\uffef\012\uffef" +
    "\057\uffef\061\uffef\001\002\000\006\023\uffec\024\uffec\001" +
    "\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0103\000\004\024\003\001\001\000\002\001\001\000" +
    "\004\004\006\001\001\000\002\001\001\000\004\025\007" +
    "\001\001\000\014\002\010\026\011\027\015\032\013\052" +
    "\014\001\001\000\006\033\372\034\373\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\053\346\001\001\000\004" +
    "\043\036\001\001\000\004\002\021\001\001\000\006\030" +
    "\022\031\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\031\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\044\041\045\037\001\001" +
    "\000\006\002\044\046\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\047\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\002\051\050\055\051\054\070\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\071" +
    "\060\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\002\051\051\057\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\002\063\072\065\103\062\001\001\000\010" +
    "\002\063\072\342\103\062\001\001\000\006\102\333\104" +
    "\332\001\001\000\004\106\325\001\001\000\004\105\066" +
    "\001\001\000\002\001\001\000\004\055\070\001\001\000" +
    "\036\005\072\035\106\036\120\037\104\040\117\041\076" +
    "\056\113\057\116\060\107\061\100\066\112\073\074\074" +
    "\071\076\101\001\001\000\032\005\072\035\106\036\120" +
    "\037\104\040\117\057\324\060\323\061\100\066\112\073" +
    "\074\074\071\076\101\001\001\000\016\017\307\021\312" +
    "\023\313\107\152\110\151\111\311\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\005\131\006\136\007\135\010\251\014\126\015\125" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\055\121\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\005\072\035" +
    "\106\036\120\037\104\040\117\041\076\056\113\057\116" +
    "\060\107\061\100\066\112\073\074\074\071\076\101\001" +
    "\001\000\002\001\001\000\016\005\131\006\136\007\135" +
    "\010\127\014\126\015\125\001\001\000\014\005\131\006" +
    "\136\007\135\014\126\015\220\001\001\000\002\001\001" +
    "\000\010\017\204\020\210\021\206\001\001\000\004\062" +
    "\177\001\001\000\004\002\172\001\001\000\006\107\152" +
    "\110\151\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\146\001\001\000\002\001\001" +
    "\000\016\005\131\006\136\007\135\010\140\014\126\015" +
    "\125\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\131\006\150\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\131\006\147\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\005\131\006\136\007\135\010\154" +
    "\014\126\015\125\063\155\064\157\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\112\161\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\005\131\006\136\007\135\010\164\014\126" +
    "\015\125\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\005\131\006\136\007\135\010\170" +
    "\014\126\015\125\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\005\131\006\136\007\135" +
    "\010\174\014\126\015\125\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\005\131\006\136\007\135\014\126\015\217" +
    "\001\001\000\002\001\001\000\014\005\131\006\136\007" +
    "\135\014\126\015\216\001\001\000\002\001\001\000\010" +
    "\005\131\006\136\007\215\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\146\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\005\131\006\136" +
    "\007\135\010\224\011\226\012\227\013\223\014\126\015" +
    "\125\075\230\001\001\000\002\001\001\000\004\022\247" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\005\072\035\106\036\120" +
    "\037\104\040\117\041\076\056\232\057\233\060\107\061" +
    "\100\066\112\073\074\074\071\076\101\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\005" +
    "\131\006\136\007\135\010\224\011\236\013\223\014\126" +
    "\015\125\001\001\000\002\001\001\000\020\005\131\006" +
    "\136\007\135\010\224\013\240\014\126\015\125\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\005\131\006\136\007\135\010\250\014" +
    "\126\015\125\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\005\072\061\260\077\261\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\113\263\001\001\000\026\005\131\006\136\007\135" +
    "\010\224\011\226\012\264\013\223\014\126\015\125\100" +
    "\265\001\001\000\002\001\001\000\004\114\266\001\001" +
    "\000\002\001\001\000\004\115\270\001\001\000\010\005" +
    "\072\061\272\101\273\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\116\274\001\001\000\002\001\001\000" +
    "\004\117\276\001\001\000\036\005\072\035\106\036\120" +
    "\037\104\040\117\041\076\056\277\057\116\060\107\061" +
    "\100\066\112\073\074\074\071\076\101\001\001\000\004" +
    "\120\300\001\001\000\004\042\301\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\304\001\001\000\006" +
    "\107\152\110\151\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\005\131\006\136\007\135\010" +
    "\316\014\126\015\125\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\005" +
    "\131\006\136\007\135\010\154\014\126\015\125\063\155" +
    "\064\321\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\055\327\001\001\000\036\005\072\035\106\036\120\037" +
    "\104\040\117\041\076\056\113\057\116\060\107\061\100" +
    "\066\112\073\074\074\071\076\101\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\104\341\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\054\363\001\001\000\012\002\063\067\353\072\352\103" +
    "\062\001\001\000\002\001\001\000\004\065\355\001\001" +
    "\000\004\043\357\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\044\041\045\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\002\063\067\365\072\352\103\062\001\001\000\004" +
    "\065\366\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\034\376\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\034\u0103\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MJParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MJParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MJParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	Tab.init();
	Tab.currentScope().addToLocals(new Obj(Obj.Type, "bool", new Struct(Struct.Bool))); 	
	Helper.Parser = this;	
	Validator.Parser = this;
	CodeHelper.Parser = this;
	Counting.Parser = this;

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 
	Symbol s = this.getScanner().next_token();
	//if (s != null && s.value != null)	log.info(s.toString() + " " + s.value.toString());
	return s;

    }



	Logger log = Logger.getLogger(getClass());
	
	int printCallCount = 0;
	boolean errorDetected = false;
	static final Struct boolType = new Struct(Struct.Bool);
	
	// -- 
	// -- MJ Parser (Main)
	// --

	public static void main(String[] args) throws Exception {
		
		Logger log = Logger.getLogger(MJParser.class);
			
		Reader br = null;

		try {
			if (args.length < 2) {
				log.error("Niste prosledili ispravan broj argumenata! Upotreba: MJParser <source-file> <obj-file>");
				return;
			}

			File sourceCode = new File(args[0]);

			if (!sourceCode.exists()) {
				log.error("<source-file> [" + sourceCode.getAbsolutePath() + "] nije pronadjen!");
				return;
			}

			log.info("Compiling source file: " + sourceCode.getAbsolutePath());

			br = new BufferedReader(new FileReader(sourceCode));

			Yylex lexer = new Yylex(br);

			MJParser p = new MJParser(lexer);
			
			Symbol s = p.parse(); 		
									
			Tab.dump(null);			
			
			Counting.print();
			
			if (!p.errorDetected) {
				File objFile = new File(args[1]);
				log.info("Generisanje bajtkoda: " + objFile.getAbsolutePath());
				if (objFile.exists()) objFile.delete();
				Code.write(new FileOutputStream(objFile));
				log.info("----------------------------");	
				log.info("Parsiranje uspesno zavrseno!");
				log.info("----------------------------");	
				log.info("> Pokretanje .obj");
				log.info("----------------------------");
				String[] runArgs = {args[1]};
				Run.main(runArgs);
			}

			else {
				log.error("Parsiranje NIJE uspesno zavrseno!");
			}
		} 
		
		finally {
			if (br != null) try { br.close(); } catch (IOException e1) { log.error(e1.getMessage(), e1); }
		}

	}
	
	public void report_fatal_error(String message, Object info) throws java.lang.Exception {
		done_parsing();
		report_error(message, info);
	} 
	
	public void syntax_error(Symbol cur_token) {
		report_error("Sintaksna greska", cur_token);
	}
	
	public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
		report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
	} 
	
	public void report_error(String message, Object info) {
		errorDetected = true;
		StringBuilder msg = new StringBuilder(message);
		if (info instanceof Symbol) {
			msg.append(" na liniji ").append(((Symbol)info).left);
		}
		log.error(msg.toString());
	}
	
	public void report_info(String message, Object info) {
		StringBuilder msg = new StringBuilder(message);
		if (info instanceof Symbol) {
			msg.append(" na liniji ").append(((Symbol)info).left);
		}
		log.info(msg.toString());
	}
	

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MJParser$actions {


	Helper helper = new Helper();
	Validator validator = new Validator();
	CodeHelper codeHelper = new CodeHelper();

  private final MJParser parser;

  /** Constructor */
  CUP$MJParser$actions(MJParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MJParser$result;

      /* select the action based on the action number */
      switch (CUP$MJParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // Statement ::= BREAK SEMI_COMMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
								if (!Helper.inFor) parser.report_error("Morate biti u FOR petlji [" + sleft + "]", null);
								else {
									Code.putJump(CodeHelper.breakDest.pop().intValue());
								}								
							
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // Statement ::= CONTINUE SEMI_COMMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
								if (!Helper.inFor) parser.report_error("Morate biti u FOR petlji [" + sleft + "]", null);
								else {																	
									Code.putJump(0);
									CodeHelper.continueDest.push(Code.pc - 2);
									CodeHelper.continueFound.push(true);																	
								}								
							
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // Statement ::= ForStarted FOR LEFTPAREN OptForInit SEMI_COMMA NT$6 OptForCondition NT$7 SEMI_COMMA NT$8 OptForIncr NT$9 RIGHTPAREN NT$10 Statement NT$11 ForOver 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
								Code.fixup(CodeHelper.loopEnd.pop().intValue());
							
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-16)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // NT$11 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
					

								if (CodeHelper.continueFound.peek().booleanValue() == true) {
									CodeHelper.continueFound.pop();
									System.out.println("fixujem jednu");
									Code.fixup(CodeHelper.continueDest.pop().intValue());									
								}	
								
								Code.putJump(CodeHelper.loopInc.pop().intValue());																				
							
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$11",78, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // NT$10 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
 
								Code.fixup(CodeHelper.loopBody.pop().intValue());
							
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$10",77, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // NT$9 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
								Code.putJump(CodeHelper.loopCondition.pop().intValue());
							
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$9",76, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // NT$8 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;

								CodeHelper.loopInc.push(Code.pc);
							
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$8",75, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
																					
								Code.putFalseJump(Code.ne, 0);																						
								CodeHelper.loopBody.push(Code.pc - 2);										
								CodeHelper.breakDest.push(Code.pc);								
								Code.putJump(0);
								CodeHelper.loopEnd.push(Code.pc - 2);
							
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$7",74, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // NT$6 ::= 
            {
              Object RESULT =null;

								CodeHelper.loopCondition.push(Code.pc);															
							
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$6",73, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // OptForCondition ::= 
            {
              Object RESULT =null;
		 Code.loadConst(1); Code.loadConst(1); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OptForCondition",62, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // OptForCondition ::= Condition 
            {
              Object RESULT =null;
		int resultleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int resultright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj result = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 Code.loadConst(1); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OptForCondition",62, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // OptForIncr ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 helper.oporavak(eleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OptForIncr",63, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // OptForIncr ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OptForIncr",63, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // OptForIncr ::= DesignatorStatement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OptForIncr",63, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // OptForInit ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 helper.oporavak(eleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OptForInit",61, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // OptForInit ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OptForInit",61, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // OptForInit ::= DesignatorStatement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OptForInit",61, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // ForOver ::= 
            {
              Object RESULT =null;
		 
							CodeHelper.inFor.pop();
							CodeHelper.continueFound.pop();
							if (CodeHelper.inFor.isEmpty()) Helper.inFor = false; 
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ForOver",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // ForStarted ::= 
            {
              Object RESULT =null;
		 	
							Helper.inFor = true;
							CodeHelper.inFor.push(true);
							CodeHelper.continueFound.push(false);							
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ForStarted",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // Relop ::= LESSEQUAL 
            {
              Integer RESULT =null;
		 RESULT = Code.le; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // Relop ::= LESS 
            {
              Integer RESULT =null;
		 RESULT = Code.lt; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // Relop ::= GREATEREQUAL 
            {
              Integer RESULT =null;
		 RESULT = Code.ge; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // Relop ::= GREATER 
            {
              Integer RESULT =null;
		 RESULT = Code.gt; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // Relop ::= NOTEQUAL 
            {
              Integer RESULT =null;
		 RESULT = Code.ne; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // Relop ::= EQUAL 
            {
              Integer RESULT =null;
		 RESULT = Code.eq; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // CondFact ::= Expr Relop Expr 
            {
              Obj RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj left = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int opcodeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int opcoderight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer opcode = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj right = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = codeHelper.relop(left, opcode, right, rightleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // CondFact ::= Expr 
            {
              Obj RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj expr = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = expr; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // CondTerm ::= CondFact 
            {
              Obj RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj o = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = o; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // CondTerm ::= CondTerm LOGICALAND CondFact 
            {
              Obj RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj left = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj right = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
			 					
						if (!validator.boolTypes(left, right)) parser.report_error("Tipovi moraju biti kompatibilni [" + rightleft + "]", null);					
						else codeHelper.checkCond(0);							
						RESULT = right;
	 				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // Condition ::= error 
            {
              Obj RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 helper.oporavak(eleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // Condition ::= CondTerm 
            {
              Obj RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj o = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = o; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // Condition ::= Condition LOGICALOR CondTerm 
            {
              Obj RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj left = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj right = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
							if (!validator.boolTypes(left, right)) parser.report_error("Tipovi moraju biti kompatibilni [" + rightleft + "]", null);					
							else codeHelper.checkCond(1);	 
							RESULT = right;
		 				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // ConditionTerm ::= Condition 
            {
              Object RESULT =null;
		int resultleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int resultright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj result = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
							Code.loadConst(1);
							Code.putFalseJump(Code.eq, 0);
							CodeHelper.patch.push(new Integer(Code.pc - 2));
							CodeHelper.cond.push(new Boolean(true));
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConditionTerm",59, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // UnmatchedIfStatement ::= IfMatched Unmatched 
            {
              Object RESULT =null;
		 
									if (CodeHelper.cond.pop().booleanValue()) {
										Code.fixup(CodeHelper.patch2.pop());
									}
								
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("UnmatchedIfStatement",60, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // UnmatchedIfStatement ::= IF LEFTPAREN ConditionTerm RIGHTPAREN Statement 
            {
              Object RESULT =null;
		 
									if (CodeHelper.cond.pop().booleanValue()) {
										Code.fixup(CodeHelper.patch.pop()); 
									}
								
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("UnmatchedIfStatement",60, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Unmatched ::= UnmatchedIfStatement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // IfMatched ::= IF LEFTPAREN ConditionTerm RIGHTPAREN Matched ELSE 
            {
              Object RESULT =null;
		
		  							if (CodeHelper.cond.peek().booleanValue()) {
			  							Code.putJump(0);
										CodeHelper.patch2.push(new Integer(Code.pc - 2));
										Code.fixup(CodeHelper.patch.pop());
									}
		  						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IfMatched",58, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // MatchedIfStatement ::= IfMatched Matched 
            {
              Object RESULT =null;
		 
									if (CodeHelper.cond.pop().booleanValue()) {
										Code.fixup(CodeHelper.patch2.pop());
									}
								
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MatchedIfStatement",57, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Matched ::= MatchedIfStatement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Return ::= RETURN Expr SEMI_COMMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj e = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 codeHelper.return_(true, sleft, helper.insideMethod, helper.isVoid, helper.currentMethod, e); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Return",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Return ::= RETURN SEMI_COMMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 codeHelper.return_(false, sleft, helper.insideMethod, helper.isVoid, helper.currentMethod, null); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Return",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // ActPars ::= ActPars COMMA Expr 
            {
              Object RESULT =null;
		int apleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int apright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object ap = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj e = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 validator.addActParam(e); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // ActPars ::= Expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj e = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 validator.addActParam(e); RESULT = e; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // OptionalActPars ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OptionalActPars",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // OptionalActPars ::= ActPars 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OptionalActPars",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Factor ::= Designator LEFTPAREN error NT$5 RIGHTPAREN 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int funcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Obj func = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // NT$5 ::= 
            {
              Obj RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj func = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 helper.oporavak(eleft);  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$5",72, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Factor ::= Designator LEFTPAREN OptionalActPars RIGHTPAREN 
            {
              Obj RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj func = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		 	
								helper.checkMainInvokeCall();
								codeHelper.factorFunctionCall(func, funcleft);
								RESULT = func;
							
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // DesignatorStatement ::= Designator NT$4 LEFTPAREN OptionalActPars RIGHTPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int funcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Obj func = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
																						
								if (!validator.methodParametersMatch(helper.insideClass, func)) parser.report_error("Navedeni argumenti nisu ispravni pri pozivu [" + funcleft + "]", null);
								else codeHelper.designatorFunctionCall(func);																					 				
								RESULT = func;
							
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // NT$4 ::= 
            {
              Object RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj func = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

								helper.checkMainInvokeCall();
								if (!validator.isMeth(func)) parser.report_error("Morate pozivati funkciju [" + funcleft + "]", null);
								else if (func.getType() != Tab.noType) parser.report_error("Samo void funkcija moze biti pozvana kao iskaz [" + funcleft + "]", null);																
							
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$4",71, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Factor ::= LEFTPAREN Expr RIGHTPAREN 
            {
              Obj RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj expr = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
							RESULT = expr;
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Factor ::= NEW Type LEFTSQBRACKET Expr RIGHTSQBRACKET 
            {
              Obj RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj expr = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 		
							RESULT = Tab.noObj;	
							if (!validator.intType(expr)) parser.report_error("Pri instanciranju niza morate navesti int tip [" + exprleft + "]", null);						
							else RESULT = codeHelper.newArray(type);
							Helper.NewArraySize = expr.getAdr();								
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Factor ::= BOOLCONST 
            {
              Obj RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
							Obj o = new Obj(Obj.Con, "", parser.boolType);
							o.setAdr((b.booleanValue() == true) ? 1 : 0);
							RESULT = o;
							Code.load(o);
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Factor ::= CHARCONST 
            {
              Obj RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
							Obj o = new Obj(Obj.Con, "", Tab.charType);
							o.setAdr(c.charValue());
							RESULT = o;
							Code.load(o);
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Factor ::= NUMBER 
            {
              Obj RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
							Obj o = new Obj(Obj.Con, "", Tab.intType);
							o.setAdr(n.intValue());									
							RESULT = o;
							Code.load(o);				
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Factor ::= Designator 
            {
              Obj RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj d = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
							RESULT = d;
							Code.load(d);
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // MulopRight ::= ASSIGNMOD 
            {
              Integer RESULT =null;
		 RESULT = Code.rem; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopRight",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // MulopRight ::= ASSIGNDIVIDE 
            {
              Integer RESULT =null;
		 RESULT = Code.div; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopRight",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // MulopRight ::= ASSIGNMULTIPLE 
            {
              Integer RESULT =null;
		 RESULT = Code.mul; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopRight",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // MulopLeft ::= MOD 
            {
              Integer RESULT =null;
		 RESULT = Code.rem; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeft",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // MulopLeft ::= DIVIDE 
            {
              Integer RESULT =null;
		 RESULT = Code.div; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeft",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // MulopLeft ::= MULTIPLE 
            {
              Integer RESULT =null;
		 RESULT = Code.mul; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeft",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // AddopRight ::= ASSIGNMINUS 
            {
              Integer RESULT =null;
		 RESULT = Code.sub; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopRight",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // AddopRight ::= ASSIGNPLUS 
            {
              Integer RESULT =null;
		 RESULT = Code.add; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopRight",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // AddopLeft ::= MINUS 
            {
              Integer RESULT =null;
		 RESULT = Code.sub; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopLeft",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // AddopLeft ::= PLUS 
            {
              Integer RESULT =null;
		 RESULT = Code.add; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopLeft",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Term ::= Factor 
            {
              Obj RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj f = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = f; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Term ::= Term KAPICA Factor 
            {
              Obj RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj l = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj r = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = codeHelper.kapica(l, r); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Term ::= Term MulopLeft Factor 
            {
              Obj RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj l = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj r = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = codeHelper.mulopLeft(l, op, r); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // TermList ::= Term 
            {
              Obj RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj t = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = t; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("TermList",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // TermList ::= TermList AddopLeft Term 
            {
              Obj RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj l = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj r = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = codeHelper.addopLeft(l, op, r); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("TermList",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // TermListComb ::= TermList 
            {
              Obj RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj t = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = t; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("TermListComb",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // TermListComb ::= TermList MulopRight TermListComb 
            {
              Obj RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj l = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj r = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = codeHelper.mulopRight(l, op, r); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("TermListComb",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // TermListComb ::= TermList AddopRight TermListComb 
            {
              Obj RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj l = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj r = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = codeHelper.addopRight(l, op, r); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("TermListComb",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Expr ::= MINUS TermListComb 
            {
              Obj RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj t = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 Code.put(Code.neg); RESULT = t; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Expr ::= TermListComb 
            {
              Obj RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj t = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = t; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // DesignatorStatement ::= Designator Assignop error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		  helper.oporavak(eleft);  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Assignop ::= MulopRight 
            {
              Integer RESULT =null;
		int resleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int resright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer res = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = res; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Assignop",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Assignop ::= AddopRight 
            {
              Integer RESULT =null;
		int resleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int resright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer res = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = res; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Assignop",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Assignop ::= ASSIGN 
            {
              Integer RESULT =null;
		 RESULT = Code.eq; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Assignop",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // DesignatorStatement ::= Designator Assignop Expr 
            {
              Object RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj left = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj right = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		   								
								if (!validator.checkAssignment(left, right))
									parser.report_error("Dodela vrednosti nije moguca [" + leftleft + "]", null);
								else
									codeHelper.assignOp(left, op, right);				 	
							
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Designator ::= Designator NT$3 LEFTSQBRACKET Expr RIGHTSQBRACKET 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Obj array = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj index = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
				
								RESULT = Tab.noObj;											
								if (!validator.intType(index)) parser.report_error("Morate indeksirati sa int tipom [" + indexleft + "]", null);								
								else RESULT = helper.resolveArrayElem(array, arrayleft, index);																																																																												 														
							
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NT$3 ::= 
            {
              Obj RESULT =null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj array = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

								if (!validator.isArray(array)) parser.report_error("Morate pristupiti nizu [" + arrayleft + "]", null);
								else Code.load(array);					
							
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$3",70, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // DesignatorStatement ::= Designator DECREMENT 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj d = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
								if (!validator.intType(d) || !validator.lvalue(d)) parser.report_error("Morate inkrementirati int tip, lvalue vrednost [" + dleft + "]", null);															
								else codeHelper.decrement(d);
							
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DesignatorStatement ::= Designator INCREMENT 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj d = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
								if (!validator.intType(d) || !validator.lvalue(d))
									parser.report_error("Morate inkrementirati int tip, lvalue vrednost [" + dleft + "]", null);															
								else codeHelper.increment(d);																											
							
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Designator ::= IDENT 
            {
              Obj RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = helper.resolveIdent(name, nameleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Designator ::= Designator NT$2 DOT IDENT 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int objectleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int objectright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj object = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
								RESULT = helper.designatorField(object, name, nameleft);
							
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$2 ::= 
            {
              Obj RESULT =null;
		int objectleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int objectright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj object = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

								if (!validator.lvalueClass(object)) parser.report_error("Morate pristupati klasnim poljima [" + objectleft + "]", null);								
								else Code.load(object);								
							
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$2",69, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Factor ::= NEW Type 
            {
              Obj RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
								if (!validator.userDefinedClass(type)) parser.report_error("Pri koriscenju new morate instancirati klasu [" + typeleft + "]", null);								
								RESULT = new Obj(Obj.Var, "", new Struct(Struct.Class));
						 	
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CommaNumber ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CommaNumber",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CommaNumber ::= COMMA NUMBER 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CommaNumber",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Print ::= PRINT LEFTPAREN Expr CommaNumber RIGHTPAREN SEMI_COMMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj e = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
			
								if (!validator.isPrimitive(e)) parser.report_error("Mora biti prostog tipa [" + eleft + "]", null);
								else { Code.loadConst(e.getType() == Tab.charType ? 1 : 5); Code.put(e.getType() == Tab.charType ? Code.bprint : Code.print); }						
							
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Print",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Read ::= READ LEFTPAREN Designator RIGHTPAREN SEMI_COMMA 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj d = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 	
								if (!validator.lvalue(d)) parser.report_error("Read naredba mora citati u lvalue [" + dleft + "]", null);
								else if (!validator.isPrimitive(d)) parser.report_error("Mora biti prostog tipa [" + dleft + "]", null);
								else { Code.put(d.getType() == Tab.charType ? Code.bread : Code.read); Code.store(d); }		
							
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Read",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // BlockStatement ::= LEFTBRACE StatementList RIGHTBRACE 
            {
              Object RESULT =null;
		 Counting.found("statementBlocks"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("BlockStatement",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DesignatorStatementSemiComma ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 helper.oporavak(eleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatementSemiComma",52, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DesignatorStatementSemiComma ::= DesignatorStatement SEMI_COMMA 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatementSemiComma",52, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Matched ::= BlockStatement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Matched ::= Print 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Matched ::= Read 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Matched ::= Return 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Matched ::= DesignatorStatementSemiComma 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Statement ::= Unmatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Statement ::= Matched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // StatementList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // StatementList ::= StatementList Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ClassMethodDecl ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethodDecl",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ClassMethodDecl ::= LEFTBRACE MethodDeclList RIGHTBRACE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethodDecl",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ClassVarDecl ::= LocalPars 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarDecl",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ClassBase ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 helper.oporavak(eleft);  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassBase",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ClassBase ::= IDENT 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 helper.superClass(name, nameleft);  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassBase",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ClassName ::= IDENT 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 helper.insertClass(name, nameleft);  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassName",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ClassDecl ::= CLASS ClassName EXTENDS ClassBase LEFTBRACE ClassVarDecl ClassMethodDecl RIGHTBRACE 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 helper.closeClass(rleft);  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ClassDecl ::= CLASS ClassName LEFTBRACE ClassVarDecl ClassMethodDecl RIGHTBRACE 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 helper.closeClass(rleft);  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FormParam ::= Type IDENT LEFTSQBRACKET RIGHTSQBRACKET 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT = helper.insertVariable(name, nameleft, 1); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParam",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FormParam ::= Type IDENT 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		RESULT = helper.insertVariable(name, nameleft, 0); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParam",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FormalPars ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 helper.oporavak(eleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalPars",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FormalPars ::= FormalPars COMMA FormParam 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalPars",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FormalPars ::= FormParam 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalPars",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OptionalFormalPars ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OptionalFormalPars",54, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OptionalFormalPars ::= FormalPars 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OptionalFormalPars",54, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // FormalParsEnd ::= 
            {
              Object RESULT =null;
		 helper.insideFormalArguments = false; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParsEnd",55, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LocalVar ::= IDENT LEFTSQBRACKET RIGHTSQBRACKET 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT = helper.insertVariable(varName, varNameleft, 1); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVar",66, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LocalVar ::= IDENT 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = helper.insertVariable(varName, varNameleft, 0); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVar",66, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // LocalVarList ::= LocalVarList COMMA LocalVar 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarList",64, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LocalVarList ::= LocalVar 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarList",64, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LocalVarDecl ::= Type error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 helper.oporavak(eleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDecl",65, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LocalVarDecl ::= Type LocalVarList SEMI_COMMA 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDecl",65, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LocalPars ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalPars",56, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LocalPars ::= LocalVarDecl LocalPars 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalPars",56, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // MethodName ::= IDENT 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 helper.insertMethod(name, nameleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodName",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // MethodType ::= Type 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodType",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // MethodType ::= VOID 
            {
              Object RESULT =null;
		 RESULT = helper.currentType = Tab.noType; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodType",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Static ::= 
            {
              Object RESULT =null;
		 helper.isStatic = false; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Static",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Static ::= STATIC 
            {
              Object RESULT =null;
		 helper.isStatic = true; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Static",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // MethodDecl ::= Static MethodType MethodName LEFTPAREN OptionalFormalPars FormalParsEnd RIGHTPAREN error NT$1 LEFTBRACE StatementList RIGHTBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 helper.closeMethod(lleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDecl",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-11)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$1 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 helper.oporavak(eleft); helper.initializeCodeMethod(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$1",68, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // MethodDecl ::= Static MethodType MethodName LEFTPAREN OptionalFormalPars FormalParsEnd RIGHTPAREN LocalPars NT$0 LEFTBRACE StatementList RIGHTBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 helper.closeMethod(lleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDecl",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-11)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$0 ::= 
            {
              Object RESULT =null;
 helper.initializeCodeMethod(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$0",67, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // MethodDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // MethodDeclList ::= MethodDeclList MethodDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Var ::= IDENT LEFTSQBRACKET RIGHTSQBRACKET 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT = helper.insertVariable(varName, varNameleft, 1); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Var",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Var ::= IDENT 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = helper.insertVariable(varName, varNameleft, 0); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Var",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VarList ::= error COMMA Var 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 helper.oporavak(eleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarList",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VarList ::= VarList COMMA Var 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarList",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VarList ::= Var 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarList",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VarDecl ::= Type error SEMI_COMMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 helper.oporavak(eleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VarDecl ::= Type VarList SEMI_COMMA 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ConstValueType ::= BOOLCONST 
            {
              Struct RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Boolean val = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = parser.boolType; helper.constValue = (val.booleanValue() == true) ? 1 : 0; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstValueType",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ConstValueType ::= CHARCONST 
            {
              Struct RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Character val = (Character)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = Tab.charType; helper.constValue = val; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstValueType",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ConstValueType ::= NUMBER 
            {
              Struct RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = Tab.intType; helper.constValue = val; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstValueType",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Const ::= IDENT ASSIGN ConstValueType 
            {
              Object RESULT =null;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = helper.insertConstant(constName, type, typeleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Const",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ConstDeclList ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 helper.oporavak(eleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDeclList",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ConstDeclList ::= Const 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDeclList",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ConstDeclList ::= ConstDeclList COMMA Const 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDeclList",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ConstDecl ::= CONST Type ConstDeclList SEMI_COMMA 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Type ::= IDENT 
            {
              Struct RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = helper.resolveType(name, nameleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Type",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Decl ::= ClassDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Decl",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Decl ::= VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Decl",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Decl ::= ConstDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Decl",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclList",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DeclList ::= DeclList Decl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclList",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ProgName ::= IDENT 
            {
              Obj RESULT =null;
		int progNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int progNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String progName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = helper.insertProgram(progName); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgName",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		RESULT = start_val;
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MJParser$parser.done_parsing();
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= PROGRAM ProgName DeclList LEFTBRACE MethodDeclList RIGHTBRACE 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Obj p = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		 helper.closeProgram(p); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Program",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

